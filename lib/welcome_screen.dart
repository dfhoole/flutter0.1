print(default_api.natural_language_write_file(path = "lib/welcome_screen.dart", prompt = "在 WelcomeScreen 的 AppBar 的 actions 中添加一个切换主题的按钮，按钮图标为 Theme.of(context).brightness == Brightness.light ? Icons.dark_mode : Icons.light_mode, 点击时调用父组件传递过来的 toggleTheme 方法.", selected_content = "import \'package:flutter/material.dart\';\nimport \'package:flutter_deepseek_unsplash/services/unsplash_service.dart\';\nimport \'package:flutter_deepseek_unsplash/widgets/loading_widget.dart\';\nimport \'package:flutter_deepseek_unsplash/main.dart\';\nimport \'package:flutter_deepseek_unsplash/image_detail_screen.dart\';\nimport \'package:flutter_deepseek_unsplash/config.dart\' as app_config;\n\nclass WelcomeScreen extends StatefulWidget {\n  final VoidCallback toggleTheme;\n\n  const WelcomeScreen({Key? key, required this.toggleTheme}) : super(key: key);\n  @override\n  _WelcomeScreenState createState() => _WelcomeScreenState();\n}\n\nclass _WelcomeScreenState extends State<WelcomeScreen> {\n  late String _imageUrl;\n  bool _isLoading = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadRandomImage();\n  }\n\n  Future<void> _loadRandomImage() async {\n    setState(() {\n      _isLoading = true;\n    });\n\n    try {\n      final response = await UnsplashService.getRandomImage();\n      if (response.isNotEmpty) {\n        setState(() {\n          _imageUrl = response[0][\'urls\'][\'regular\'];\n          app_config.lastImageId = response[0][\'id\'];\n        });\n      }\n    } catch (e) {\n      print(\'加载图片失败: $e\');\n    } finally {\n      setState(() {\n        _isLoading = false;\n      });\n    }\n  }\n\n  void _onScroll() {\n    if (_scrollController.position.pixels ==\n        _scrollController.position.maxScrollExtent) {\n      _loadMoreImages();\n    }\n  }\n\n    final ScrollController _scrollController = ScrollController();\n    List<dynamic> _images = [];\n    int _page = 1;\n    bool _loadingMore = false;\n\n   Future<void> _loadMoreImages() async {\n    if (_loadingMore) return;\n    setState(() {\n      _loadingMore = true;\n    });\n    try {\n      final response = await UnsplashService.getRandomImages(page: _page + 1);\n      if (response.isNotEmpty) {\n         setState(() {\n          _images.addAll(response);\n          _page++;\n        });\n      }\n    } catch (e) {\n      print(\'加载更多图片失败: $e\');\n    } finally {\n      setState(() {\n         _loadingMore = false;\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\'每日一图\'),\n          actions: [\n          ],\n        ),\n      body: _isLoading\n          ? const Center(child: LoadingWidget(progress: 0.5)) // Display loading widget\n          : Stack(\n              children: [\n                  Positioned.fill(\n                    child: GestureDetector(\n                      onTap: () {\n                        Navigator.push(\n                          context,\n                          MaterialPageRoute(\n                            builder: (context) => ImageDetailScreen(\n                              imageUrl: _imageUrl,\n                              imageId: app_config.lastImageId,\n                            ),\n                          ),\n                        );\n                      },\n                     child:  CachedNetworkImage(\n                       imageUrl: _imageUrl,\n                      fit: BoxFit.cover,\n                      placeholder: (context, url) => const Center(\n                        child: CircularProgressIndicator(),\n                      ),\n                      errorWidget: (context, url, error) => const Icon(Icons.error),\n                    ),\n                  ),\n                ),\n                Positioned(\n                   bottom: 0,\n                  left: 0,\n                  right: 0,\n                  child: SizedBox(\n                  height: 200,\n                  child: NotificationListener<ScrollNotification>(\n                  onNotification: (scrollNotification) {\n                    if (scrollNotification is ScrollEndNotification) {\n                      _onScroll();\n                    }\n                    return true;\n                  },\n                    child:  ListView.builder(\n                    controller: _scrollController,\n                    scrollDirection: Axis.horizontal,\n                      itemCount: _images.length + (_loadingMore ? 1 : 0), // Add 1 for the loading indicator if loading more\n                    itemBuilder: (BuildContext context, int index) {\n                       if (index < _images.length) {\n                         final item = _images[index];\n                           return Container(\n                             margin: const EdgeInsets.all(5),\n                              width: 150,\n                             height: 150,\n                             child:  GestureDetector(\n                              onTap: () {\n                               Navigator.push(\n                                  context,\n                                  MaterialPageRoute(\n                                    builder: (context) => ImageDetailScreen(\n                                      imageUrl: item[\'urls\'][\'regular\'],\n                                       imageId: item[\'id\'],\n                                    ),\n                                  ),\n                                );\n                              },\n                               child: CachedNetworkImage(\n                                  imageUrl: item[\'urls\'][\'regular\'],\n                                  fit: BoxFit.cover,\n                                   placeholder: (context, url) => const Center(\n                                    child: CircularProgressIndicator(),\n                                  ),\n                                  errorWidget: (context, url, error) => const Icon(Icons.error),\n                                ),\n                             ),\n                           );\n                        } else {\n                             return const Center(\n                                child: CircularProgressIndicator(),\n                             );\n                         }\n                      }\n                    ),\n                  ),\n                ),\n              ]\n          ),\n    );\n  }\n}\n"))